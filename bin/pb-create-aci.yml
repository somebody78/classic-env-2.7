---
# Playbook to create generic templates
# Variable are pulled from a file in varfile
#

- name: Ansible generic configs
  vars_files:
    - ~/.vars-aci-credentials.yml
    - "{{ varfile }}"
  hosts: "{{ aci_env }}"

  connection: local
  gather_facts: no

  # Empty lists used to create config for static ports
  vars:
    playbook_version: '2.2'
    static_ports1: []
    static_ports2: []

    gv_general: "{{ gv_general_default|combine(override_gv_general) }}"
    gv_aci: "{{ gv_aci_default|combine(override_gv_aci) }}"
    gv_srx: "{{ gv_srx_default|combine(override_gv_srx) }}"

  tasks:
  #
  # Compare playbook_version and input_vars_version
  #
  - name: Check input_vars_version
    fail: 
      msg: "playbook_version and input_vars_version do not match. Maybe you used the wrong template file?"
    when: playbook_version != input_vars_version

  #
  # Get timestamp to check for faults later, subtract 10 minutes right away to allow for time difference between ansible server and APIC
  #
  - name: Get timestamp as string
    command: "date -d -10min +%Y-%m-%dT%H:%M:%S"
    register: timestamp_start

  #
  # create tenant
  #
  - name: Create a tenant in ACI
    aci_tenant: 
      tenant="{{ aci.tenant_name }}"
      description="{{ aci.tenant_desc }}"
      state=present
      hostname="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    no_log: true

  #
  # Create VRFs ####
  # loop over aci.vrfs
  #
  - name: Create VRFs in ACI
    aci_vrf:
      vrf="{{ item.key }}"
      description="{{ item.value }}"
      tenant="{{ aci.tenant_name }}"
      state=present
      hostname="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ aci.vrfs|default({})|dict2items }}"
    no_log: true

  #
  # Create BDs without routing
  # Loop over networks without an IP address and create bridge domains.
  # Conditions: a name must be defined; vrf must be defined as a key in aci.vrfs; string "aci" must be in the devices list.
  #
  - name: Create BDs in ACI without routing
    aci_bd:
      bd="{{ item.name+gv_aci.bd_suffix }}"
      description="{{ item.desc }} Subnet {{ item.ip_network }}/{{ item.ip_cidr }} VLAN {{ item.vlan_id }}"
      vrf="{{ item.vrf }}"
      tenant="{{ aci.tenant_name }}"
      arp_flooding="yes"
      l2_unknown_unicast="flood"
      l3_unknown_multicast="flood"
      multi_dest="bd-flood"
      enable_routing="no"
      state=present
      host="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ networks|default([])|flatten(levels=1) }}"
    when:
      - item.name is defined
      - item.name != ''
      - '"aci" in item.devices'
      - item.vrf in aci.vrfs
      - item.ip_aci is defined
      - item.ip_aci == ''
    no_log: true

  #
  # Create BDs with routing
  # Loop over networks with an IP address and create bridge domains.
  # Conditions: a name must be defined; vrf must be defined as a key in aci.vrfs; string "aci" must be in the devices list.
  #
  - name: Create BDs in ACI with routing
    aci_bd:
      bd="{{ item.name+gv_aci.bd_suffix }}"
      description="{{ item.desc }} Subnet {{ item.ip_network }}/{{ item.ip_cidr }} VLAN {{ item.vlan_id }}"
      vrf="{{ item.vrf }}"
      tenant="{{ aci.tenant_name }}"
      state=present
      host="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ networks|default([])|flatten(levels=1) }}"
    when:
      - item.name is defined
      - item.name != ''
      - '"aci" in item.devices'
      - item.vrf in aci.vrfs
      - item.ip_aci is defined
      - item.ip_aci != ''
    no_log: true

  #
  # Add Subnet to BD ###
  # Add subnet to bridge domain when the default gateway is supposed to be on ACI.
  # Use same conditions as for creating BD, otherwise we might add a subnet to non-existent BD.
  #
  - name: Create Subnets in Bds in ACI
    aci_bd_subnet:
      bd="{{ item.name+gv_aci.bd_suffix }}"
      description="{{ item.desc }} Subnet {{ item.ip_network }}/{{ item.ip_cidr }} VLAN {{ item.vlan_id }}"
      gateway="{{ item.ip_aci }}"
      mask="{{ item.ip_cidr }}"
      tenant="{{ aci.tenant_name }}" 
      state=present 
      host="{{ inventory_hostname }}" 
      username="{{ apic_user }}" 
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ networks|default([])|flatten(levels=1) }}"
    when: 
      - item.name is defined
      - item.name != ''
      - '"aci" in item.devices'
      - item.vrf in aci.vrfs
      - item.ip_aci is defined
      - item.ip_aci != ''
    no_log: true

  #
  # Create APs 
  # loop over aci.aps
  #
  - name: Create APs in ACI
    aci_ap:
      app_profile="{{ item.key }}"
      descr="{{ item.value }}"
      tenant="{{ aci.tenant_name }}"
      state=present
      hostname="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ aci.aps|default({})|dict2items }}"
    no_log: true

  #
  # Create EPGs ###
  # Loop over networks and create EPGs
  # Use same conditions as bd
  #
  - name: Create EPGs in ACI
    aci_epg:
      epg="{{ item.name+gv_aci.epg_suffix }}"
      description="{{ item.desc }} Subnet {{ item.ip_network }}/{{ item.ip_cidr }} VLAN {{ item.vlan_id }}"
      bridge_domain="{{ item.name+gv_aci.bd_suffix }}"
      tenant="{{ aci.tenant_name }}"
      app_profile="{{ item.ap }}"
      state=present 
      hostname="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ networks|default([])|flatten(levels=1) }}"
    when:
      - item.name is defined
      - item.name != ''
      - '"aci" in item.devices'
      - item.ap in aci.aps
    no_log: true

  #
  # Map EPGs to the domains #
  # Loop over networks, for now the domain is in gv_aci
  - name: Map EPGs to domain
    aci_epg_to_domain:
      epg="{{ item.name+gv_aci.epg_suffix }}"
      app_profile="{{ item.ap }}"
      tenant="{{ aci.tenant_name }}"
      domain_profile="{{ gv_aci.domain_name }}"
      domain_type="{{ gv_aci.domain_type }}"
      state=present 
      hostname="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ networks|default([])|flatten(levels=1) }}"
    when:
      - item.name is defined
      - item.name != ''
      - '"aci" in item.devices'
      - item.ap in aci.aps
    no_log: true

  #
  # Create a list of static ports, intermediate step ##
  # Loop over networks and attached_devices
  # output is [ { 'ap': bla, 'epg': bla, 'vlan_id': bla, 'ports': [bla,bla] }, .. ]
  - name: Create static port list, static_ports1
    set_fact:
      static_ports1: "{{ static_ports1 }} + [ { 'ap': '{{ item.0.ap }}', 'epg': '{{ item.0.name+gv_aci.epg_suffix }}', 'vlan_id': '{{ item.0.vlan_id }}', 'ports': {{ gv_aci.ports_tdn[item.1] }} } ]"
    loop: "{{ networks|default([])|subelements('attached_devices') }}"
    when:
      - item.0.name is defined
      - item.0.name != ''
      - '"aci" in item.0.devices'
      - item.0.ap in aci.aps
      - item.1 in gv_aci.ports_tdn

  #
  # Create a list of static ports, final step ##
  # Loop over previous list and nested ports
  # output is [ { 'ap': bla, 'epg': bla, 'vlan_id': bla, 'port': bla }, .. ]
  - name: Create static port list, static_ports2
    set_fact:
      static_ports2: "{{ static_ports2 }} + [ { 'ap': '{{ item.0.ap }}', 'epg': '{{ item.0.epg }}', 'vlan_id': '{{ item.0.vlan_id }}', 'port': {{ item.1 }} } ]"
    loop: "{{ static_ports1|default([])|subelements('ports') }}"

  #
  # Attach static ports to EPG
  #
  - name: Attach static ports to EPGs
    aci_static_binding_to_epg:
      tenant="{{ aci.tenant_name }}"
      ap="{{ item.ap }}"
      epg="{{ item.epg }}"
      encap_id="{{ item.vlan_id }}"
      interface_mode="{{ gv_aci.port_mode }}"
      interface_type="{{ item.port.interface_type }}"
      pod_id="{{ item.port.pod_id }}"
      leafs="{{ item.port.leafs }}"
      interface="{{ item.port.interface }}"
      state="present"
      hostname="{{ inventory_hostname }}"
      username="{{ apic_user }}"
      password="{{ apic_pass }}"
      use_proxy=no
      validate_certs=no
    loop: "{{ static_ports2|default([])|flatten(levels=1) }}"
    loop_control:
      index_var: index
    register: out

  #
  # Prepare ACI L3Out JSON configs
  # Loop over bgps list
  #
  - name: Prepare JSON config for ACI L3Outs
    template:
      src: jinja-templates/aci/aci-create-l3out.j2
      dest: ../data/output-files/aci-create-l3out-{{item.type}}.json
    loop: "{{ bgps|default([])|flatten(levels=1) }}"
#    no_log: true

  #
  # Submit JSON config for L3Out to ACI REST ##
  # Same loop as in preparing the config files
  - name: Submit JSON config for L3Out
    aci_rest:
      path: "api/node/mo/uni/tn-{{item.tenant}}/out-to_{{gv_general.firewalls[general.fw].shortname}}-{{gv_srx.ri_prefix+srx.ri_id}}_l3o.json"
      method: post
      src: ../data/output-files/aci-create-l3out-{{item.type}}.json
      hostname: "{{ inventory_hostname }}"
      username: "{{ apic_user }}"
      password: "{{ apic_pass }}"
      use_proxy: no
      validate_certs: no
    loop: "{{ bgps|default([])|flatten(levels=1) }}"
    register: out

  #
  # Delete ACI L3Out JSON configs
  # Loop over bgps list
  #
  - name: Delete JSON config for ACI L3Outs
    file:
      path: ../data/output-files/aci-create-l3out-{{item.type}}.json
      state: absent
    loop: "{{ bgps|default([])|flatten(levels=1) }}"
    no_log: true

  #
  # Wait for a couple of seconds
  #
  - name: Pause to let ACI rebuilt the fault list
    pause:
      seconds: 10

  #
  # Get list of faults since beginning of this playbook, defined by timestamp_start
  # 
  - name: List of fault records
    aci_rest:
      path: 'api/class/faultRecord.json?query-target-filter=and(gt(faultRecord.created,"{{ timestamp_start.stdout }}"))&order-by=faultRecord.created'
      method: get
      hostname: "{{ inventory_hostname }}"
      username: "{{ apic_user }}"
      password: "{{ apic_pass }}"
      use_proxy: no
      validate_certs: no
    register: aci_faultrecords_list

  #
  # Create fault list using template module
  #
  - name: Create file with faultRecord list
    template:
      src: jinja-templates/aci/aci-faultrecord-list.j2
      dest: ../data/output-files/aci-faultrecord-list.txt
    no_log: true

  #
  # Check output
  #
  - debug:
      msg: "List of new fault records ({{ aci_faultrecords_list.totalCount }}): < cat ../data/output-files/aci-faultrecord-list.txt >"

  #
  # Get list of faults since beginning of this playbook, defined by timestamp_start
  # 
  - name: List of fault insts
    aci_rest:
      path: 'api/class/faultInst.json?query-target-filter=and(gt(faultInst.created,"{{ timestamp_start.stdout }}"))&order-by=faultInst.created'
      method: get
      hostname: "{{ inventory_hostname }}"
      username: "{{ apic_user }}"
      password: "{{ apic_pass }}"
      use_proxy: no
      validate_certs: no
    register: aci_faultinst_list

  #
  # Create fault list using template module
  #
  - name: Create file with faultInst list
    template:
      src: jinja-templates/aci/aci-faultinst-list.j2
      dest: ../data/output-files/aci-faultinst-list.txt
    no_log: true

  #
  # Check output
  #
  - debug:
      msg: "List of new fault instances ({{ aci_faultinst_list.totalCount }}): < cat ../data/output-files/aci-faultinst-list.txt >"

# This is the end, my friend
...
